/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface SelfVerificationRootInterface extends utils.Interface {
  functions: {
    "getConfigId(bytes32,bytes32,bytes)": FunctionFragment;
    "onVerificationSuccess(bytes,bytes)": FunctionFragment;
    "scope()": FunctionFragment;
    "verifySelfProof(bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getConfigId"
      | "onVerificationSuccess"
      | "scope"
      | "verifySelfProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getConfigId",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onVerificationSuccess",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "scope", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifySelfProof",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getConfigId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onVerificationSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scope", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySelfProof",
    data: BytesLike
  ): Result;

  events: {
    "ScopeUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ScopeUpdated"): EventFragment;
}

export interface ScopeUpdatedEventObject {
  newScope: BigNumber;
}
export type ScopeUpdatedEvent = TypedEvent<
  [BigNumber],
  ScopeUpdatedEventObject
>;

export type ScopeUpdatedEventFilter = TypedEventFilter<ScopeUpdatedEvent>;

export interface SelfVerificationRoot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SelfVerificationRootInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getConfigId(
      destinationChainId: PromiseOrValue<BytesLike>,
      userIdentifier: PromiseOrValue<BytesLike>,
      userDefinedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onVerificationSuccess(
      output: PromiseOrValue<BytesLike>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scope(overrides?: CallOverrides): Promise<[BigNumber]>;

    verifySelfProof(
      proofPayload: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getConfigId(
    destinationChainId: PromiseOrValue<BytesLike>,
    userIdentifier: PromiseOrValue<BytesLike>,
    userDefinedData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  onVerificationSuccess(
    output: PromiseOrValue<BytesLike>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scope(overrides?: CallOverrides): Promise<BigNumber>;

  verifySelfProof(
    proofPayload: PromiseOrValue<BytesLike>,
    userContextData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getConfigId(
      destinationChainId: PromiseOrValue<BytesLike>,
      userIdentifier: PromiseOrValue<BytesLike>,
      userDefinedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onVerificationSuccess(
      output: PromiseOrValue<BytesLike>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    scope(overrides?: CallOverrides): Promise<BigNumber>;

    verifySelfProof(
      proofPayload: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ScopeUpdated(uint256)"(
      newScope?: PromiseOrValue<BigNumberish> | null
    ): ScopeUpdatedEventFilter;
    ScopeUpdated(
      newScope?: PromiseOrValue<BigNumberish> | null
    ): ScopeUpdatedEventFilter;
  };

  estimateGas: {
    getConfigId(
      destinationChainId: PromiseOrValue<BytesLike>,
      userIdentifier: PromiseOrValue<BytesLike>,
      userDefinedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onVerificationSuccess(
      output: PromiseOrValue<BytesLike>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scope(overrides?: CallOverrides): Promise<BigNumber>;

    verifySelfProof(
      proofPayload: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConfigId(
      destinationChainId: PromiseOrValue<BytesLike>,
      userIdentifier: PromiseOrValue<BytesLike>,
      userDefinedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onVerificationSuccess(
      output: PromiseOrValue<BytesLike>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifySelfProof(
      proofPayload: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

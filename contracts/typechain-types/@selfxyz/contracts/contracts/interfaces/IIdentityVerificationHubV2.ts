/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace SelfStructs {
  export type VerificationConfigV2Struct = {
    olderThanEnabled: PromiseOrValue<boolean>;
    olderThan: PromiseOrValue<BigNumberish>;
    forbiddenCountriesEnabled: PromiseOrValue<boolean>;
    forbiddenCountriesListPacked: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    ofacEnabled: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ];
  };

  export type VerificationConfigV2StructOutput = [
    boolean,
    BigNumber,
    boolean,
    [BigNumber, BigNumber, BigNumber, BigNumber],
    [boolean, boolean, boolean]
  ] & {
    olderThanEnabled: boolean;
    olderThan: BigNumber;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: [BigNumber, BigNumber, BigNumber, BigNumber];
    ofacEnabled: [boolean, boolean, boolean];
  };
}

export declare namespace IRegisterCircuitVerifier {
  export type RegisterCircuitProofStruct = {
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    pubSignals: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type RegisterCircuitProofStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber, BigNumber]
  ] & {
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
    pubSignals: [BigNumber, BigNumber, BigNumber];
  };
}

export declare namespace IDscCircuitVerifier {
  export type DscCircuitProofStruct = {
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    pubSignals: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type DscCircuitProofStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber]
  ] & {
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
    pubSignals: [BigNumber, BigNumber];
  };
}

export interface IIdentityVerificationHubV2Interface extends utils.Interface {
  functions: {
    "batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])": FunctionFragment;
    "batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])": FunctionFragment;
    "discloseVerifier(bytes32)": FunctionFragment;
    "dscCircuitVerifiers(bytes32,uint256)": FunctionFragment;
    "generateConfigId((bool,uint256,bool,uint256[4],bool[3]))": FunctionFragment;
    "getIdentityCommitmentMerkleRoot(bytes32)": FunctionFragment;
    "registerCircuitVerifiers(bytes32,uint256)": FunctionFragment;
    "registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))": FunctionFragment;
    "registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))": FunctionFragment;
    "registry(bytes32)": FunctionFragment;
    "rootTimestamp(bytes32,uint256)": FunctionFragment;
    "setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))": FunctionFragment;
    "updateDscVerifier(bytes32,uint256,address)": FunctionFragment;
    "updateRegisterCircuitVerifier(bytes32,uint256,address)": FunctionFragment;
    "updateRegistry(bytes32,address)": FunctionFragment;
    "updateVcAndDiscloseCircuit(bytes32,address)": FunctionFragment;
    "verificationConfigV2Exists(bytes32)": FunctionFragment;
    "verify(bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchUpdateDscCircuitVerifiers"
      | "batchUpdateRegisterCircuitVerifiers"
      | "discloseVerifier"
      | "dscCircuitVerifiers"
      | "generateConfigId"
      | "getIdentityCommitmentMerkleRoot"
      | "registerCircuitVerifiers"
      | "registerCommitment"
      | "registerDscKeyCommitment"
      | "registry"
      | "rootTimestamp"
      | "setVerificationConfigV2"
      | "updateDscVerifier"
      | "updateRegisterCircuitVerifier"
      | "updateRegistry"
      | "updateVcAndDiscloseCircuit"
      | "verificationConfigV2Exists"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchUpdateDscCircuitVerifiers",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateRegisterCircuitVerifiers",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "discloseVerifier",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dscCircuitVerifiers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateConfigId",
    values: [SelfStructs.VerificationConfigV2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityCommitmentMerkleRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCircuitVerifiers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCommitment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      IRegisterCircuitVerifier.RegisterCircuitProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDscKeyCommitment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      IDscCircuitVerifier.DscCircuitProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registry",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rootTimestamp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationConfigV2",
    values: [SelfStructs.VerificationConfigV2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDscVerifier",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegisterCircuitVerifier",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVcAndDiscloseCircuit",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationConfigV2Exists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchUpdateDscCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateRegisterCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discloseVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dscCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateConfigId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityCommitmentMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rootTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationConfigV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDscVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegisterCircuitVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVcAndDiscloseCircuit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationConfigV2Exists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export interface IIdentityVerificationHubV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIdentityVerificationHubV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchUpdateDscCircuitVerifiers(
      attestationIds: PromiseOrValue<BytesLike>[],
      typeIds: PromiseOrValue<BigNumberish>[],
      verifierAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchUpdateRegisterCircuitVerifiers(
      attestationIds: PromiseOrValue<BytesLike>[],
      typeIds: PromiseOrValue<BigNumberish>[],
      verifierAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    discloseVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dscCircuitVerifiers(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateConfigId(
      config: SelfStructs.VerificationConfigV2Struct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getIdentityCommitmentMerkleRoot(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerCircuitVerifiers(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerCommitment(
      attestationId: PromiseOrValue<BytesLike>,
      registerCircuitVerifierId: PromiseOrValue<BigNumberish>,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDscKeyCommitment(
      attestationId: PromiseOrValue<BytesLike>,
      dscCircuitVerifierId: PromiseOrValue<BigNumberish>,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registry(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rootTimestamp(
      attestationId: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setVerificationConfigV2(
      config: SelfStructs.VerificationConfigV2Struct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDscVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      verifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRegisterCircuitVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      verifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRegistry(
      attestationId: PromiseOrValue<BytesLike>,
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVcAndDiscloseCircuit(
      attestationId: PromiseOrValue<BytesLike>,
      vcAndDiscloseCircuitVerifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verificationConfigV2Exists(
      configId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    verify(
      baseVerificationInput: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  batchUpdateDscCircuitVerifiers(
    attestationIds: PromiseOrValue<BytesLike>[],
    typeIds: PromiseOrValue<BigNumberish>[],
    verifierAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchUpdateRegisterCircuitVerifiers(
    attestationIds: PromiseOrValue<BytesLike>[],
    typeIds: PromiseOrValue<BigNumberish>[],
    verifierAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  discloseVerifier(
    attestationId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  dscCircuitVerifiers(
    attestationId: PromiseOrValue<BytesLike>,
    typeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  generateConfigId(
    config: SelfStructs.VerificationConfigV2Struct,
    overrides?: CallOverrides
  ): Promise<string>;

  getIdentityCommitmentMerkleRoot(
    attestationId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerCircuitVerifiers(
    attestationId: PromiseOrValue<BytesLike>,
    typeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerCommitment(
    attestationId: PromiseOrValue<BytesLike>,
    registerCircuitVerifierId: PromiseOrValue<BigNumberish>,
    registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDscKeyCommitment(
    attestationId: PromiseOrValue<BytesLike>,
    dscCircuitVerifierId: PromiseOrValue<BigNumberish>,
    dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registry(
    attestationId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  rootTimestamp(
    attestationId: PromiseOrValue<BytesLike>,
    root: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setVerificationConfigV2(
    config: SelfStructs.VerificationConfigV2Struct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDscVerifier(
    attestationId: PromiseOrValue<BytesLike>,
    typeId: PromiseOrValue<BigNumberish>,
    verifierAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRegisterCircuitVerifier(
    attestationId: PromiseOrValue<BytesLike>,
    typeId: PromiseOrValue<BigNumberish>,
    verifierAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRegistry(
    attestationId: PromiseOrValue<BytesLike>,
    registryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVcAndDiscloseCircuit(
    attestationId: PromiseOrValue<BytesLike>,
    vcAndDiscloseCircuitVerifierAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verificationConfigV2Exists(
    configId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify(
    baseVerificationInput: PromiseOrValue<BytesLike>,
    userContextData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchUpdateDscCircuitVerifiers(
      attestationIds: PromiseOrValue<BytesLike>[],
      typeIds: PromiseOrValue<BigNumberish>[],
      verifierAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchUpdateRegisterCircuitVerifiers(
      attestationIds: PromiseOrValue<BytesLike>[],
      typeIds: PromiseOrValue<BigNumberish>[],
      verifierAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    discloseVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    dscCircuitVerifiers(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateConfigId(
      config: SelfStructs.VerificationConfigV2Struct,
      overrides?: CallOverrides
    ): Promise<string>;

    getIdentityCommitmentMerkleRoot(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerCircuitVerifiers(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerCommitment(
      attestationId: PromiseOrValue<BytesLike>,
      registerCircuitVerifierId: PromiseOrValue<BigNumberish>,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    registerDscKeyCommitment(
      attestationId: PromiseOrValue<BytesLike>,
      dscCircuitVerifierId: PromiseOrValue<BigNumberish>,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    rootTimestamp(
      attestationId: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setVerificationConfigV2(
      config: SelfStructs.VerificationConfigV2Struct,
      overrides?: CallOverrides
    ): Promise<string>;

    updateDscVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegisterCircuitVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(
      attestationId: PromiseOrValue<BytesLike>,
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVcAndDiscloseCircuit(
      attestationId: PromiseOrValue<BytesLike>,
      vcAndDiscloseCircuitVerifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verificationConfigV2Exists(
      configId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify(
      baseVerificationInput: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    batchUpdateDscCircuitVerifiers(
      attestationIds: PromiseOrValue<BytesLike>[],
      typeIds: PromiseOrValue<BigNumberish>[],
      verifierAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchUpdateRegisterCircuitVerifiers(
      attestationIds: PromiseOrValue<BytesLike>[],
      typeIds: PromiseOrValue<BigNumberish>[],
      verifierAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    discloseVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dscCircuitVerifiers(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateConfigId(
      config: SelfStructs.VerificationConfigV2Struct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdentityCommitmentMerkleRoot(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerCircuitVerifiers(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerCommitment(
      attestationId: PromiseOrValue<BytesLike>,
      registerCircuitVerifierId: PromiseOrValue<BigNumberish>,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDscKeyCommitment(
      attestationId: PromiseOrValue<BytesLike>,
      dscCircuitVerifierId: PromiseOrValue<BigNumberish>,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registry(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootTimestamp(
      attestationId: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setVerificationConfigV2(
      config: SelfStructs.VerificationConfigV2Struct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDscVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      verifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRegisterCircuitVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      verifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRegistry(
      attestationId: PromiseOrValue<BytesLike>,
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVcAndDiscloseCircuit(
      attestationId: PromiseOrValue<BytesLike>,
      vcAndDiscloseCircuitVerifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verificationConfigV2Exists(
      configId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      baseVerificationInput: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchUpdateDscCircuitVerifiers(
      attestationIds: PromiseOrValue<BytesLike>[],
      typeIds: PromiseOrValue<BigNumberish>[],
      verifierAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchUpdateRegisterCircuitVerifiers(
      attestationIds: PromiseOrValue<BytesLike>[],
      typeIds: PromiseOrValue<BigNumberish>[],
      verifierAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    discloseVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dscCircuitVerifiers(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateConfigId(
      config: SelfStructs.VerificationConfigV2Struct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdentityCommitmentMerkleRoot(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerCircuitVerifiers(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerCommitment(
      attestationId: PromiseOrValue<BytesLike>,
      registerCircuitVerifierId: PromiseOrValue<BigNumberish>,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDscKeyCommitment(
      attestationId: PromiseOrValue<BytesLike>,
      dscCircuitVerifierId: PromiseOrValue<BigNumberish>,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registry(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootTimestamp(
      attestationId: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setVerificationConfigV2(
      config: SelfStructs.VerificationConfigV2Struct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDscVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      verifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRegisterCircuitVerifier(
      attestationId: PromiseOrValue<BytesLike>,
      typeId: PromiseOrValue<BigNumberish>,
      verifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      attestationId: PromiseOrValue<BytesLike>,
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVcAndDiscloseCircuit(
      attestationId: PromiseOrValue<BytesLike>,
      vcAndDiscloseCircuitVerifierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verificationConfigV2Exists(
      configId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      baseVerificationInput: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

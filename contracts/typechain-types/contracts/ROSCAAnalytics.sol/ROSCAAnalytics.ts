/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ROSCAAnalytics {
  export type PlatformStatsStruct = {
    totalCircles: PromiseOrValue<BigNumberish>;
    activeCircles: PromiseOrValue<BigNumberish>;
    completedCircles: PromiseOrValue<BigNumberish>;
    totalMembers: PromiseOrValue<BigNumberish>;
    totalValueLocked: PromiseOrValue<BigNumberish>;
    totalRevenue: PromiseOrValue<BigNumberish>;
    avgSuccessRate: PromiseOrValue<BigNumberish>;
    totalCountries: PromiseOrValue<BigNumberish>;
  };

  export type PlatformStatsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalCircles: BigNumber;
    activeCircles: BigNumber;
    completedCircles: BigNumber;
    totalMembers: BigNumber;
    totalValueLocked: BigNumber;
    totalRevenue: BigNumber;
    avgSuccessRate: BigNumber;
    totalCountries: BigNumber;
  };
}

export interface ROSCAAnalyticsInterface extends utils.Interface {
  functions: {
    "PYUSD()": FunctionFragment;
    "factory()": FunctionFragment;
    "getActiveCircles()": FunctionFragment;
    "getAllCircles()": FunctionFragment;
    "getAvailableCircles(string)": FunctionFragment;
    "getPlatformStats()": FunctionFragment;
    "getUserActiveCircles(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PYUSD"
      | "factory"
      | "getActiveCircles"
      | "getAllCircles"
      | "getAvailableCircles"
      | "getPlatformStats"
      | "getUserActiveCircles"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PYUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveCircles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCircles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableCircles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveCircles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "PYUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ROSCAAnalytics extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ROSCAAnalyticsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PYUSD(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getActiveCircles(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAllCircles(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAvailableCircles(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPlatformStats(
      overrides?: CallOverrides
    ): Promise<[ROSCAAnalytics.PlatformStatsStructOutput]>;

    getUserActiveCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PYUSD(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  getActiveCircles(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAllCircles(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAvailableCircles(
    country: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPlatformStats(
    overrides?: CallOverrides
  ): Promise<ROSCAAnalytics.PlatformStatsStructOutput>;

  getUserActiveCircles(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PYUSD(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    getActiveCircles(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAllCircles(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAvailableCircles(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPlatformStats(
      overrides?: CallOverrides
    ): Promise<ROSCAAnalytics.PlatformStatsStructOutput>;

    getUserActiveCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PYUSD(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveCircles(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCircles(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableCircles(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformStats(overrides?: CallOverrides): Promise<BigNumber>;

    getUserActiveCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PYUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveCircles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllCircles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableCircles(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserActiveCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

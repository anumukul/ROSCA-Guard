/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IKYCVerifierInterface extends utils.Interface {
  functions: {
    "getUserVerificationDetails(address)": FunctionFragment;
    "isEligibleForROSCA(address,string,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getUserVerificationDetails" | "isEligibleForROSCA"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUserVerificationDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleForROSCA",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getUserVerificationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleForROSCA",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IKYCVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKYCVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getUserVerificationDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean, boolean] & {
        isVerified: boolean;
        nationality: string;
        ageAtVerification: BigNumber;
        verificationTimestamp: BigNumber;
        isHuman: boolean;
        passedOFACCheck: boolean;
      }
    >;

    isEligibleForROSCA(
      user: PromiseOrValue<string>,
      requiredCountry: PromiseOrValue<string>,
      circleMinAge: PromiseOrValue<BigNumberish>,
      circleMaxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { eligible: boolean; reason: string }>;
  };

  getUserVerificationDetails(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, boolean, boolean] & {
      isVerified: boolean;
      nationality: string;
      ageAtVerification: BigNumber;
      verificationTimestamp: BigNumber;
      isHuman: boolean;
      passedOFACCheck: boolean;
    }
  >;

  isEligibleForROSCA(
    user: PromiseOrValue<string>,
    requiredCountry: PromiseOrValue<string>,
    circleMinAge: PromiseOrValue<BigNumberish>,
    circleMaxAge: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { eligible: boolean; reason: string }>;

  callStatic: {
    getUserVerificationDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean, boolean] & {
        isVerified: boolean;
        nationality: string;
        ageAtVerification: BigNumber;
        verificationTimestamp: BigNumber;
        isHuman: boolean;
        passedOFACCheck: boolean;
      }
    >;

    isEligibleForROSCA(
      user: PromiseOrValue<string>,
      requiredCountry: PromiseOrValue<string>,
      circleMinAge: PromiseOrValue<BigNumberish>,
      circleMaxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { eligible: boolean; reason: string }>;
  };

  filters: {};

  estimateGas: {
    getUserVerificationDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEligibleForROSCA(
      user: PromiseOrValue<string>,
      requiredCountry: PromiseOrValue<string>,
      circleMinAge: PromiseOrValue<BigNumberish>,
      circleMaxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getUserVerificationDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEligibleForROSCA(
      user: PromiseOrValue<string>,
      requiredCountry: PromiseOrValue<string>,
      circleMinAge: PromiseOrValue<BigNumberish>,
      circleMaxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

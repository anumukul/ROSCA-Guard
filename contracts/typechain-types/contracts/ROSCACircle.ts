/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ROSCACircle {
  export type CircleParamsStruct = {
    monthlyAmount: PromiseOrValue<BigNumberish>;
    maxMembers: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    country: PromiseOrValue<string>;
    minAge: PromiseOrValue<BigNumberish>;
    maxAge: PromiseOrValue<BigNumberish>;
  };

  export type CircleParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    monthlyAmount: BigNumber;
    maxMembers: BigNumber;
    duration: BigNumber;
    country: string;
    minAge: BigNumber;
    maxAge: BigNumber;
  };

  export type MemberStruct = {
    memberAddress: PromiseOrValue<string>;
    hasContributed: PromiseOrValue<boolean>;
    hasReceived: PromiseOrValue<boolean>;
    reputationScore: PromiseOrValue<BigNumberish>;
    joinedAt: PromiseOrValue<BigNumberish>;
  };

  export type MemberStructOutput = [
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    memberAddress: string;
    hasContributed: boolean;
    hasReceived: boolean;
    reputationScore: BigNumber;
    joinedAt: BigNumber;
  };
}

export interface ROSCACircleInterface extends utils.Interface {
  functions: {
    "PYUSD()": FunctionFragment;
    "circleParams()": FunctionFragment;
    "circleStartTime()": FunctionFragment;
    "currentRecipient()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "emergencyExit()": FunctionFragment;
    "factory()": FunctionFragment;
    "getAllMembers()": FunctionFragment;
    "getCircleInfo()": FunctionFragment;
    "getMemberInfo(address)": FunctionFragment;
    "getReputationScore(address)": FunctionFragment;
    "isActive()": FunctionFragment;
    "isCompleted()": FunctionFragment;
    "isKYCVerified(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "joinCircle()": FunctionFragment;
    "kycVerifier()": FunctionFragment;
    "makeContribution()": FunctionFragment;
    "memberIndex(address)": FunctionFragment;
    "members(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "selectRecipient()": FunctionFragment;
    "totalContributions()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PYUSD"
      | "circleParams"
      | "circleStartTime"
      | "currentRecipient"
      | "currentRound"
      | "emergencyExit"
      | "factory"
      | "getAllMembers"
      | "getCircleInfo"
      | "getMemberInfo"
      | "getReputationScore"
      | "isActive"
      | "isCompleted"
      | "isKYCVerified"
      | "isMember"
      | "joinCircle"
      | "kycVerifier"
      | "makeContribution"
      | "memberIndex"
      | "members"
      | "owner"
      | "renounceOwnership"
      | "selectRecipient"
      | "totalContributions"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PYUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "circleParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "circleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCircleInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isKYCVerified",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCircle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kycVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "PYUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "circleParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKYCVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinCircle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kycVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CircleCompleted()": EventFragment;
    "ContributionMade(address,uint256,uint256)": EventFragment;
    "EmergencyExit(address,uint256)": EventFragment;
    "MemberJoined(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PayoutDistributed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CircleCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutDistributed"): EventFragment;
}

export interface CircleCompletedEventObject {}
export type CircleCompletedEvent = TypedEvent<[], CircleCompletedEventObject>;

export type CircleCompletedEventFilter = TypedEventFilter<CircleCompletedEvent>;

export interface ContributionMadeEventObject {
  contributor: string;
  amount: BigNumber;
  round: BigNumber;
}
export type ContributionMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ContributionMadeEventObject
>;

export type ContributionMadeEventFilter =
  TypedEventFilter<ContributionMadeEvent>;

export interface EmergencyExitEventObject {
  member: string;
  refundAmount: BigNumber;
}
export type EmergencyExitEvent = TypedEvent<
  [string, BigNumber],
  EmergencyExitEventObject
>;

export type EmergencyExitEventFilter = TypedEventFilter<EmergencyExitEvent>;

export interface MemberJoinedEventObject {
  member: string;
  memberCount: BigNumber;
}
export type MemberJoinedEvent = TypedEvent<
  [string, BigNumber],
  MemberJoinedEventObject
>;

export type MemberJoinedEventFilter = TypedEventFilter<MemberJoinedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayoutDistributedEventObject {
  recipient: string;
  amount: BigNumber;
  round: BigNumber;
}
export type PayoutDistributedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PayoutDistributedEventObject
>;

export type PayoutDistributedEventFilter =
  TypedEventFilter<PayoutDistributedEvent>;

export interface ROSCACircle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ROSCACircleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PYUSD(overrides?: CallOverrides): Promise<[string]>;

    circleParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        monthlyAmount: BigNumber;
        maxMembers: BigNumber;
        duration: BigNumber;
        country: string;
        minAge: BigNumber;
        maxAge: BigNumber;
      }
    >;

    circleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRecipient(overrides?: CallOverrides): Promise<[string]>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyExit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getAllMembers(
      overrides?: CallOverrides
    ): Promise<[ROSCACircle.MemberStructOutput[]]>;

    getCircleInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        ROSCACircle.CircleParamsStructOutput,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        params: ROSCACircle.CircleParamsStructOutput;
        memberCount: BigNumber;
        round: BigNumber;
        active: boolean;
        completed: boolean;
      }
    >;

    getMemberInfo(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ROSCACircle.MemberStructOutput]>;

    getReputationScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    isCompleted(overrides?: CallOverrides): Promise<[boolean]>;

    isKYCVerified(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMember(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinCircle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kycVerifier(overrides?: CallOverrides): Promise<[string]>;

    makeContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, BigNumber, BigNumber] & {
        memberAddress: string;
        hasContributed: boolean;
        hasReceived: boolean;
        reputationScore: BigNumber;
        joinedAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selectRecipient(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalContributions(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PYUSD(overrides?: CallOverrides): Promise<string>;

  circleParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      monthlyAmount: BigNumber;
      maxMembers: BigNumber;
      duration: BigNumber;
      country: string;
      minAge: BigNumber;
      maxAge: BigNumber;
    }
  >;

  circleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  currentRecipient(overrides?: CallOverrides): Promise<string>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyExit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getAllMembers(
    overrides?: CallOverrides
  ): Promise<ROSCACircle.MemberStructOutput[]>;

  getCircleInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      ROSCACircle.CircleParamsStructOutput,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      params: ROSCACircle.CircleParamsStructOutput;
      memberCount: BigNumber;
      round: BigNumber;
      active: boolean;
      completed: boolean;
    }
  >;

  getMemberInfo(
    member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ROSCACircle.MemberStructOutput>;

  getReputationScore(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  isCompleted(overrides?: CallOverrides): Promise<boolean>;

  isKYCVerified(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinCircle(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kycVerifier(overrides?: CallOverrides): Promise<string>;

  makeContribution(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  members(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, boolean, BigNumber, BigNumber] & {
      memberAddress: string;
      hasContributed: boolean;
      hasReceived: boolean;
      reputationScore: BigNumber;
      joinedAt: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selectRecipient(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PYUSD(overrides?: CallOverrides): Promise<string>;

    circleParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        monthlyAmount: BigNumber;
        maxMembers: BigNumber;
        duration: BigNumber;
        country: string;
        minAge: BigNumber;
        maxAge: BigNumber;
      }
    >;

    circleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    currentRecipient(overrides?: CallOverrides): Promise<string>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getAllMembers(
      overrides?: CallOverrides
    ): Promise<ROSCACircle.MemberStructOutput[]>;

    getCircleInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        ROSCACircle.CircleParamsStructOutput,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        params: ROSCACircle.CircleParamsStructOutput;
        memberCount: BigNumber;
        round: BigNumber;
        active: boolean;
        completed: boolean;
      }
    >;

    getMemberInfo(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ROSCACircle.MemberStructOutput>;

    getReputationScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    isCompleted(overrides?: CallOverrides): Promise<boolean>;

    isKYCVerified(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinCircle(overrides?: CallOverrides): Promise<void>;

    kycVerifier(overrides?: CallOverrides): Promise<string>;

    makeContribution(overrides?: CallOverrides): Promise<void>;

    memberIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, BigNumber, BigNumber] & {
        memberAddress: string;
        hasContributed: boolean;
        hasReceived: boolean;
        reputationScore: BigNumber;
        joinedAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    selectRecipient(overrides?: CallOverrides): Promise<void>;

    totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CircleCompleted()"(): CircleCompletedEventFilter;
    CircleCompleted(): CircleCompletedEventFilter;

    "ContributionMade(address,uint256,uint256)"(
      contributor?: PromiseOrValue<string> | null,
      amount?: null,
      round?: null
    ): ContributionMadeEventFilter;
    ContributionMade(
      contributor?: PromiseOrValue<string> | null,
      amount?: null,
      round?: null
    ): ContributionMadeEventFilter;

    "EmergencyExit(address,uint256)"(
      member?: PromiseOrValue<string> | null,
      refundAmount?: null
    ): EmergencyExitEventFilter;
    EmergencyExit(
      member?: PromiseOrValue<string> | null,
      refundAmount?: null
    ): EmergencyExitEventFilter;

    "MemberJoined(address,uint256)"(
      member?: PromiseOrValue<string> | null,
      memberCount?: null
    ): MemberJoinedEventFilter;
    MemberJoined(
      member?: PromiseOrValue<string> | null,
      memberCount?: null
    ): MemberJoinedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PayoutDistributed(address,uint256,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      round?: null
    ): PayoutDistributedEventFilter;
    PayoutDistributed(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      round?: null
    ): PayoutDistributedEventFilter;
  };

  estimateGas: {
    PYUSD(overrides?: CallOverrides): Promise<BigNumber>;

    circleParams(overrides?: CallOverrides): Promise<BigNumber>;

    circleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    currentRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getCircleInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberInfo(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReputationScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    isCompleted(overrides?: CallOverrides): Promise<BigNumber>;

    isKYCVerified(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinCircle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kycVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    makeContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selectRecipient(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PYUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    circleParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    circleStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyExit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCircleInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMemberInfo(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCompleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isKYCVerified(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinCircle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kycVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selectRecipient(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalContributions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

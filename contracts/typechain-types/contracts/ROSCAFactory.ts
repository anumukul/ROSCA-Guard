/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ROSCACircle {
  export type CircleParamsStruct = {
    monthlyAmount: PromiseOrValue<BigNumberish>;
    maxMembers: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    country: PromiseOrValue<string>;
    minAge: PromiseOrValue<BigNumberish>;
    maxAge: PromiseOrValue<BigNumberish>;
    platformFeePercent: PromiseOrValue<BigNumberish>;
  };

  export type CircleParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    monthlyAmount: BigNumber;
    maxMembers: BigNumber;
    duration: BigNumber;
    country: string;
    minAge: BigNumber;
    maxAge: BigNumber;
    platformFeePercent: BigNumber;
  };
}

export declare namespace ROSCAFactory {
  export type CircleInfoStruct = {
    circleAddress: PromiseOrValue<string>;
    params: ROSCACircle.CircleParamsStruct;
    creator: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    memberCount: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
    isCompleted: PromiseOrValue<boolean>;
    totalVolume: PromiseOrValue<BigNumberish>;
    currentRound: PromiseOrValue<BigNumberish>;
  };

  export type CircleInfoStructOutput = [
    string,
    ROSCACircle.CircleParamsStructOutput,
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    circleAddress: string;
    params: ROSCACircle.CircleParamsStructOutput;
    creator: string;
    createdAt: BigNumber;
    memberCount: BigNumber;
    isActive: boolean;
    isCompleted: boolean;
    totalVolume: BigNumber;
    currentRound: BigNumber;
  };

  export type PlatformStatsStruct = {
    totalCircles: PromiseOrValue<BigNumberish>;
    activeCircles: PromiseOrValue<BigNumberish>;
    completedCircles: PromiseOrValue<BigNumberish>;
    totalMembers: PromiseOrValue<BigNumberish>;
    totalValueLocked: PromiseOrValue<BigNumberish>;
    totalRevenue: PromiseOrValue<BigNumberish>;
    avgSuccessRate: PromiseOrValue<BigNumberish>;
    totalCountries: PromiseOrValue<BigNumberish>;
  };

  export type PlatformStatsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalCircles: BigNumber;
    activeCircles: BigNumber;
    completedCircles: BigNumber;
    totalMembers: BigNumber;
    totalValueLocked: BigNumber;
    totalRevenue: BigNumber;
    avgSuccessRate: BigNumber;
    totalCountries: BigNumber;
  };
}

export interface ROSCAFactoryInterface extends utils.Interface {
  functions: {
    "PYUSD()": FunctionFragment;
    "addSupportedCountry(string)": FunctionFragment;
    "circles(uint256)": FunctionFragment;
    "circlesByCountry(string,uint256)": FunctionFragment;
    "collectPlatformFee(uint256,uint256)": FunctionFragment;
    "createCircle(uint256,uint256,uint256,string,uint256,uint256)": FunctionFragment;
    "distributeYield(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "getActiveCircles()": FunctionFragment;
    "getAllCircles()": FunctionFragment;
    "getAvailableCircles(string)": FunctionFragment;
    "getCircleInfo(uint256)": FunctionFragment;
    "getPlatformStats()": FunctionFragment;
    "getUserActiveCircles(address)": FunctionFragment;
    "getUserCircles(address)": FunctionFragment;
    "getUserReputation(address)": FunctionFragment;
    "joinCircle(uint256)": FunctionFragment;
    "kycVerifier()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseProtocol()": FunctionFragment;
    "platformFeePercent()": FunctionFragment;
    "protocolPaused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setKYCVerifier(address)": FunctionFragment;
    "setPlatformFee(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setYieldManager(address)": FunctionFragment;
    "supportedCountries(string)": FunctionFragment;
    "totalCircles()": FunctionFragment;
    "totalPlatformRevenue()": FunctionFragment;
    "totalValueLocked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpauseProtocol()": FunctionFragment;
    "updateUserReputation(address,uint256)": FunctionFragment;
    "userCircles(address,uint256)": FunctionFragment;
    "userReputationScores(address)": FunctionFragment;
    "yieldManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PYUSD"
      | "addSupportedCountry"
      | "circles"
      | "circlesByCountry"
      | "collectPlatformFee"
      | "createCircle"
      | "distributeYield"
      | "emergencyWithdraw"
      | "getActiveCircles"
      | "getAllCircles"
      | "getAvailableCircles"
      | "getCircleInfo"
      | "getPlatformStats"
      | "getUserActiveCircles"
      | "getUserCircles"
      | "getUserReputation"
      | "joinCircle"
      | "kycVerifier"
      | "owner"
      | "pauseProtocol"
      | "platformFeePercent"
      | "protocolPaused"
      | "renounceOwnership"
      | "setKYCVerifier"
      | "setPlatformFee"
      | "setTreasury"
      | "setYieldManager"
      | "supportedCountries"
      | "totalCircles"
      | "totalPlatformRevenue"
      | "totalValueLocked"
      | "transferOwnership"
      | "treasury"
      | "unpauseProtocol"
      | "updateUserReputation"
      | "userCircles"
      | "userReputationScores"
      | "yieldManager"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PYUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addSupportedCountry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "circles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "circlesByCountry",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPlatformFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCircle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeYield",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCircles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCircles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableCircles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCircleInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveCircles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCircles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReputation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCircle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "kycVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setKYCVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setYieldManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedCountries",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCircles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPlatformRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpauseProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserReputation",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userCircles",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userReputationScores",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "PYUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "circles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "circlesByCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCircle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinCircle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kycVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKYCVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setYieldManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedCountries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPlatformRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReputationScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldManager",
    data: BytesLike
  ): Result;

  events: {
    "CircleCompleted(uint256,uint256)": EventFragment;
    "CircleCreated(uint256,address,address,uint256,string,uint256)": EventFragment;
    "CircleJoined(uint256,address)": EventFragment;
    "CountryAdded(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PlatformFeeCollected(uint256,uint256)": EventFragment;
    "ReputationUpdated(address,uint256)": EventFragment;
    "YieldDistributed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CircleCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CircleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CircleJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CountryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldDistributed"): EventFragment;
}

export interface CircleCompletedEventObject {
  circleId: BigNumber;
  totalVolume: BigNumber;
}
export type CircleCompletedEvent = TypedEvent<
  [BigNumber, BigNumber],
  CircleCompletedEventObject
>;

export type CircleCompletedEventFilter = TypedEventFilter<CircleCompletedEvent>;

export interface CircleCreatedEventObject {
  circleId: BigNumber;
  creator: string;
  circleAddress: string;
  monthlyAmount: BigNumber;
  country: string;
  maxMembers: BigNumber;
}
export type CircleCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, BigNumber],
  CircleCreatedEventObject
>;

export type CircleCreatedEventFilter = TypedEventFilter<CircleCreatedEvent>;

export interface CircleJoinedEventObject {
  circleId: BigNumber;
  member: string;
}
export type CircleJoinedEvent = TypedEvent<
  [BigNumber, string],
  CircleJoinedEventObject
>;

export type CircleJoinedEventFilter = TypedEventFilter<CircleJoinedEvent>;

export interface CountryAddedEventObject {
  country: string;
}
export type CountryAddedEvent = TypedEvent<[string], CountryAddedEventObject>;

export type CountryAddedEventFilter = TypedEventFilter<CountryAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlatformFeeCollectedEventObject {
  amount: BigNumber;
  circleId: BigNumber;
}
export type PlatformFeeCollectedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PlatformFeeCollectedEventObject
>;

export type PlatformFeeCollectedEventFilter =
  TypedEventFilter<PlatformFeeCollectedEvent>;

export interface ReputationUpdatedEventObject {
  user: string;
  newScore: BigNumber;
}
export type ReputationUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ReputationUpdatedEventObject
>;

export type ReputationUpdatedEventFilter =
  TypedEventFilter<ReputationUpdatedEvent>;

export interface YieldDistributedEventObject {
  circle: string;
  amount: BigNumber;
}
export type YieldDistributedEvent = TypedEvent<
  [string, BigNumber],
  YieldDistributedEventObject
>;

export type YieldDistributedEventFilter =
  TypedEventFilter<YieldDistributedEvent>;

export interface ROSCAFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ROSCAFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PYUSD(overrides?: CallOverrides): Promise<[string]>;

    addSupportedCountry(
      country: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    circles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    circlesByCountry(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collectPlatformFee(
      circleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCircle(
      monthlyAmount: PromiseOrValue<BigNumberish>,
      maxMembers: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      country: PromiseOrValue<string>,
      minAge: PromiseOrValue<BigNumberish>,
      maxAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeYield(
      circleId: PromiseOrValue<BigNumberish>,
      yieldAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveCircles(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAllCircles(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAvailableCircles(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCircleInfo(
      circleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ROSCAFactory.CircleInfoStructOutput]>;

    getPlatformStats(
      overrides?: CallOverrides
    ): Promise<[ROSCAFactory.PlatformStatsStructOutput]>;

    getUserActiveCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserReputation(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    joinCircle(
      circleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kycVerifier(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseProtocol(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    platformFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolPaused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKYCVerifier(
      _kycVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformFee(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setYieldManager(
      _yieldManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedCountries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalCircles(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPlatformRevenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValueLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpauseProtocol(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUserReputation(
      user: PromiseOrValue<string>,
      newScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userCircles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userReputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yieldManager(overrides?: CallOverrides): Promise<[string]>;
  };

  PYUSD(overrides?: CallOverrides): Promise<string>;

  addSupportedCountry(
    country: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  circles(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  circlesByCountry(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectPlatformFee(
    circleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCircle(
    monthlyAmount: PromiseOrValue<BigNumberish>,
    maxMembers: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    country: PromiseOrValue<string>,
    minAge: PromiseOrValue<BigNumberish>,
    maxAge: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeYield(
    circleId: PromiseOrValue<BigNumberish>,
    yieldAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveCircles(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAllCircles(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAvailableCircles(
    country: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCircleInfo(
    circleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ROSCAFactory.CircleInfoStructOutput>;

  getPlatformStats(
    overrides?: CallOverrides
  ): Promise<ROSCAFactory.PlatformStatsStructOutput>;

  getUserActiveCircles(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserCircles(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserReputation(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  joinCircle(
    circleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kycVerifier(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseProtocol(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  platformFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  protocolPaused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKYCVerifier(
    _kycVerifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformFee(
    _feePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setYieldManager(
    _yieldManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedCountries(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalCircles(overrides?: CallOverrides): Promise<BigNumber>;

  totalPlatformRevenue(overrides?: CallOverrides): Promise<BigNumber>;

  totalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpauseProtocol(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUserReputation(
    user: PromiseOrValue<string>,
    newScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userCircles(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userReputationScores(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yieldManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PYUSD(overrides?: CallOverrides): Promise<string>;

    addSupportedCountry(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    circles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    circlesByCountry(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectPlatformFee(
      circleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCircle(
      monthlyAmount: PromiseOrValue<BigNumberish>,
      maxMembers: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      country: PromiseOrValue<string>,
      minAge: PromiseOrValue<BigNumberish>,
      maxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeYield(
      circleId: PromiseOrValue<BigNumberish>,
      yieldAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveCircles(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAllCircles(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAvailableCircles(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCircleInfo(
      circleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ROSCAFactory.CircleInfoStructOutput>;

    getPlatformStats(
      overrides?: CallOverrides
    ): Promise<ROSCAFactory.PlatformStatsStructOutput>;

    getUserActiveCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserReputation(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinCircle(
      circleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    kycVerifier(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseProtocol(overrides?: CallOverrides): Promise<void>;

    platformFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPaused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setKYCVerifier(
      _kycVerifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFee(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setYieldManager(
      _yieldManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedCountries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalCircles(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlatformRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpauseProtocol(overrides?: CallOverrides): Promise<void>;

    updateUserReputation(
      user: PromiseOrValue<string>,
      newScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userCircles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CircleCompleted(uint256,uint256)"(
      circleId?: PromiseOrValue<BigNumberish> | null,
      totalVolume?: null
    ): CircleCompletedEventFilter;
    CircleCompleted(
      circleId?: PromiseOrValue<BigNumberish> | null,
      totalVolume?: null
    ): CircleCompletedEventFilter;

    "CircleCreated(uint256,address,address,uint256,string,uint256)"(
      circleId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      circleAddress?: null,
      monthlyAmount?: null,
      country?: null,
      maxMembers?: null
    ): CircleCreatedEventFilter;
    CircleCreated(
      circleId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      circleAddress?: null,
      monthlyAmount?: null,
      country?: null,
      maxMembers?: null
    ): CircleCreatedEventFilter;

    "CircleJoined(uint256,address)"(
      circleId?: PromiseOrValue<BigNumberish> | null,
      member?: PromiseOrValue<string> | null
    ): CircleJoinedEventFilter;
    CircleJoined(
      circleId?: PromiseOrValue<BigNumberish> | null,
      member?: PromiseOrValue<string> | null
    ): CircleJoinedEventFilter;

    "CountryAdded(string)"(country?: null): CountryAddedEventFilter;
    CountryAdded(country?: null): CountryAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PlatformFeeCollected(uint256,uint256)"(
      amount?: null,
      circleId?: null
    ): PlatformFeeCollectedEventFilter;
    PlatformFeeCollected(
      amount?: null,
      circleId?: null
    ): PlatformFeeCollectedEventFilter;

    "ReputationUpdated(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      newScore?: null
    ): ReputationUpdatedEventFilter;
    ReputationUpdated(
      user?: PromiseOrValue<string> | null,
      newScore?: null
    ): ReputationUpdatedEventFilter;

    "YieldDistributed(address,uint256)"(
      circle?: PromiseOrValue<string> | null,
      amount?: null
    ): YieldDistributedEventFilter;
    YieldDistributed(
      circle?: PromiseOrValue<string> | null,
      amount?: null
    ): YieldDistributedEventFilter;
  };

  estimateGas: {
    PYUSD(overrides?: CallOverrides): Promise<BigNumber>;

    addSupportedCountry(
      country: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    circles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circlesByCountry(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectPlatformFee(
      circleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCircle(
      monthlyAmount: PromiseOrValue<BigNumberish>,
      maxMembers: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      country: PromiseOrValue<string>,
      minAge: PromiseOrValue<BigNumberish>,
      maxAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeYield(
      circleId: PromiseOrValue<BigNumberish>,
      yieldAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveCircles(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCircles(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableCircles(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCircleInfo(
      circleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformStats(overrides?: CallOverrides): Promise<BigNumber>;

    getUserActiveCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReputation(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinCircle(
      circleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kycVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseProtocol(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    platformFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPaused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKYCVerifier(
      _kycVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformFee(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setYieldManager(
      _yieldManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedCountries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCircles(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlatformRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseProtocol(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUserReputation(
      user: PromiseOrValue<string>,
      newScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userCircles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PYUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addSupportedCountry(
      country: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    circles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circlesByCountry(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectPlatformFee(
      circleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCircle(
      monthlyAmount: PromiseOrValue<BigNumberish>,
      maxMembers: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      country: PromiseOrValue<string>,
      minAge: PromiseOrValue<BigNumberish>,
      maxAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeYield(
      circleId: PromiseOrValue<BigNumberish>,
      yieldAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveCircles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllCircles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableCircles(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCircleInfo(
      circleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserActiveCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCircles(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReputation(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinCircle(
      circleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kycVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseProtocol(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    platformFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKYCVerifier(
      _kycVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFee(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setYieldManager(
      _yieldManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedCountries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCircles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPlatformRevenue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalValueLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpauseProtocol(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUserReputation(
      user: PromiseOrValue<string>,
      newScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userCircles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userReputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface KYCVerifierInterface extends utils.Interface {
  functions: {
    "addSupportedAttestation(bytes32)": FunctionFragment;
    "blacklistUser(address,string)": FunctionFragment;
    "blacklistedUsers(address)": FunctionFragment;
    "configId()": FunctionFragment;
    "configureContract(bytes32)": FunctionFragment;
    "countryStats(string)": FunctionFragment;
    "emergencyPause()": FunctionFragment;
    "emergencyPaused()": FunctionFragment;
    "emergencyUnpause()": FunctionFragment;
    "getConfigId(bytes32,bytes32,bytes)": FunctionFragment;
    "getCountryStats(string)": FunctionFragment;
    "getCurrentScope()": FunctionFragment;
    "getScopeSeed()": FunctionFragment;
    "getTotalStats()": FunctionFragment;
    "getUserVerificationDetails(address)": FunctionFragment;
    "identifierToAddress(bytes32)": FunctionFragment;
    "isConfigured()": FunctionFragment;
    "isContractConfigured()": FunctionFragment;
    "isEligibleForROSCA(address,string,uint256,uint256)": FunctionFragment;
    "isUserVerified(address)": FunctionFragment;
    "maxAge()": FunctionFragment;
    "metrics()": FunctionFragment;
    "minAge()": FunctionFragment;
    "onVerificationSuccess(bytes,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFromBlacklist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeVerification(address,string)": FunctionFragment;
    "scope()": FunctionFragment;
    "scopeSeed()": FunctionFragment;
    "setAgeRange(uint256,uint256)": FunctionFragment;
    "supportedAttestations(bytes32)": FunctionFragment;
    "totalVerifiedUsers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateScope(uint256)": FunctionFragment;
    "verifiedUsers(address)": FunctionFragment;
    "verifySelfProof(bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSupportedAttestation"
      | "blacklistUser"
      | "blacklistedUsers"
      | "configId"
      | "configureContract"
      | "countryStats"
      | "emergencyPause"
      | "emergencyPaused"
      | "emergencyUnpause"
      | "getConfigId"
      | "getCountryStats"
      | "getCurrentScope"
      | "getScopeSeed"
      | "getTotalStats"
      | "getUserVerificationDetails"
      | "identifierToAddress"
      | "isConfigured"
      | "isContractConfigured"
      | "isEligibleForROSCA"
      | "isUserVerified"
      | "maxAge"
      | "metrics"
      | "minAge"
      | "onVerificationSuccess"
      | "owner"
      | "removeFromBlacklist"
      | "renounceOwnership"
      | "revokeVerification"
      | "scope"
      | "scopeSeed"
      | "setAgeRange"
      | "supportedAttestations"
      | "totalVerifiedUsers"
      | "transferOwnership"
      | "updateScope"
      | "verifiedUsers"
      | "verifySelfProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSupportedAttestation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistUser",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedUsers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "configId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configureContract",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "countryStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigId",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountryStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentScope",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScopeSeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVerificationDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "identifierToAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfigured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isContractConfigured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleForROSCA",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserVerified",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "maxAge", values?: undefined): string;
  encodeFunctionData(functionFragment: "metrics", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onVerificationSuccess",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVerification",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "scope", values?: undefined): string;
  encodeFunctionData(functionFragment: "scopeSeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAgeRange",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAttestations",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVerifiedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScope",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedUsers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySelfProof",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentScope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScopeSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVerificationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identifierToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfigured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractConfigured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleForROSCA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxAge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metrics", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onVerificationSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scopeSeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAgeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVerifiedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateScope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySelfProof",
    data: BytesLike
  ): Result;

  events: {
    "AttestationSupported(bytes32)": EventFragment;
    "ConfigUpdated(bytes32)": EventFragment;
    "CountryAdded(string)": EventFragment;
    "EmergencyPaused(bool)": EventFragment;
    "KYCScopeUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ScopeUpdated(uint256)": EventFragment;
    "UserBlacklisted(address,string)": EventFragment;
    "UserVerified(address,bytes32,string,uint256,bytes32,uint256)": EventFragment;
    "VerificationRevoked(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AttestationSupported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CountryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KYCScopeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScopeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerificationRevoked"): EventFragment;
}

export interface AttestationSupportedEventObject {
  attestationId: string;
}
export type AttestationSupportedEvent = TypedEvent<
  [string],
  AttestationSupportedEventObject
>;

export type AttestationSupportedEventFilter =
  TypedEventFilter<AttestationSupportedEvent>;

export interface ConfigUpdatedEventObject {
  newConfigId: string;
}
export type ConfigUpdatedEvent = TypedEvent<[string], ConfigUpdatedEventObject>;

export type ConfigUpdatedEventFilter = TypedEventFilter<ConfigUpdatedEvent>;

export interface CountryAddedEventObject {
  country: string;
}
export type CountryAddedEvent = TypedEvent<[string], CountryAddedEventObject>;

export type CountryAddedEventFilter = TypedEventFilter<CountryAddedEvent>;

export interface EmergencyPausedEventObject {
  paused: boolean;
}
export type EmergencyPausedEvent = TypedEvent<
  [boolean],
  EmergencyPausedEventObject
>;

export type EmergencyPausedEventFilter = TypedEventFilter<EmergencyPausedEvent>;

export interface KYCScopeUpdatedEventObject {
  newScope: BigNumber;
}
export type KYCScopeUpdatedEvent = TypedEvent<
  [BigNumber],
  KYCScopeUpdatedEventObject
>;

export type KYCScopeUpdatedEventFilter = TypedEventFilter<KYCScopeUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ScopeUpdatedEventObject {
  newScope: BigNumber;
}
export type ScopeUpdatedEvent = TypedEvent<
  [BigNumber],
  ScopeUpdatedEventObject
>;

export type ScopeUpdatedEventFilter = TypedEventFilter<ScopeUpdatedEvent>;

export interface UserBlacklistedEventObject {
  user: string;
  reason: string;
}
export type UserBlacklistedEvent = TypedEvent<
  [string, string],
  UserBlacklistedEventObject
>;

export type UserBlacklistedEventFilter = TypedEventFilter<UserBlacklistedEvent>;

export interface UserVerifiedEventObject {
  userAddress: string;
  userIdentifier: string;
  nationality: string;
  age: BigNumber;
  attestationId: string;
  timestamp: BigNumber;
}
export type UserVerifiedEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber],
  UserVerifiedEventObject
>;

export type UserVerifiedEventFilter = TypedEventFilter<UserVerifiedEvent>;

export interface VerificationRevokedEventObject {
  user: string;
  reason: string;
}
export type VerificationRevokedEvent = TypedEvent<
  [string, string],
  VerificationRevokedEventObject
>;

export type VerificationRevokedEventFilter =
  TypedEventFilter<VerificationRevokedEvent>;

export interface KYCVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KYCVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSupportedAttestation(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blacklistUser(
      user: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blacklistedUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    configId(overrides?: CallOverrides): Promise<[string]>;

    configureContract(
      _configId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    countryStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        userCount: BigNumber;
        isSupported: boolean;
        lastUpdate: BigNumber;
      }
    >;

    emergencyPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyPaused(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getConfigId(
      destinationChainId: PromiseOrValue<BytesLike>,
      userIdentifier: PromiseOrValue<BytesLike>,
      userDefinedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCountryStats(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        userCount: BigNumber;
        isSupported: boolean;
        lastUpdate: BigNumber;
      }
    >;

    getCurrentScope(overrides?: CallOverrides): Promise<[BigNumber]>;

    getScopeSeed(overrides?: CallOverrides): Promise<[string]>;

    getTotalStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalUsers: BigNumber;
        totalCountries: BigNumber;
        configScope: BigNumber;
      }
    >;

    getUserVerificationDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean, boolean] & {
        isVerified: boolean;
        nationality: string;
        ageAtVerification: BigNumber;
        verificationTimestamp: BigNumber;
        isHuman: boolean;
        passedOFACCheck: boolean;
      }
    >;

    identifierToAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isConfigured(overrides?: CallOverrides): Promise<[boolean]>;

    isContractConfigured(overrides?: CallOverrides): Promise<[boolean]>;

    isEligibleForROSCA(
      user: PromiseOrValue<string>,
      requiredCountry: PromiseOrValue<string>,
      circleMinAge: PromiseOrValue<BigNumberish>,
      circleMaxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { eligible: boolean; reason: string }>;

    isUserVerified(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    metrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalVerifications: BigNumber;
        passportVerifications: BigNumber;
        idCardVerifications: BigNumber;
        uniqueCountries: BigNumber;
        avgAge: BigNumber;
        lastUpdated: BigNumber;
      }
    >;

    minAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    onVerificationSuccess(
      output: PromiseOrValue<BytesLike>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFromBlacklist(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeVerification(
      user: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scope(overrides?: CallOverrides): Promise<[BigNumber]>;

    scopeSeed(overrides?: CallOverrides): Promise<[string]>;

    setAgeRange(
      _minAge: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedAttestations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalVerifiedUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateScope(
      _scope: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifiedUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean,
        string,
        string
      ] & {
        isVerified: boolean;
        nationality: string;
        ageAtVerification: BigNumber;
        verificationTimestamp: BigNumber;
        userIdentifier: string;
        isHuman: boolean;
        passedOFACCheck: boolean;
        attestationId: string;
        originalDateOfBirth: string;
      }
    >;

    verifySelfProof(
      proofPayload: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addSupportedAttestation(
    attestationId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blacklistUser(
    user: PromiseOrValue<string>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blacklistedUsers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  configId(overrides?: CallOverrides): Promise<string>;

  configureContract(
    _configId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  countryStats(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      userCount: BigNumber;
      isSupported: boolean;
      lastUpdate: BigNumber;
    }
  >;

  emergencyPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyPaused(overrides?: CallOverrides): Promise<boolean>;

  emergencyUnpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getConfigId(
    destinationChainId: PromiseOrValue<BytesLike>,
    userIdentifier: PromiseOrValue<BytesLike>,
    userDefinedData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCountryStats(
    country: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      userCount: BigNumber;
      isSupported: boolean;
      lastUpdate: BigNumber;
    }
  >;

  getCurrentScope(overrides?: CallOverrides): Promise<BigNumber>;

  getScopeSeed(overrides?: CallOverrides): Promise<string>;

  getTotalStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalUsers: BigNumber;
      totalCountries: BigNumber;
      configScope: BigNumber;
    }
  >;

  getUserVerificationDetails(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, boolean, boolean] & {
      isVerified: boolean;
      nationality: string;
      ageAtVerification: BigNumber;
      verificationTimestamp: BigNumber;
      isHuman: boolean;
      passedOFACCheck: boolean;
    }
  >;

  identifierToAddress(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isConfigured(overrides?: CallOverrides): Promise<boolean>;

  isContractConfigured(overrides?: CallOverrides): Promise<boolean>;

  isEligibleForROSCA(
    user: PromiseOrValue<string>,
    requiredCountry: PromiseOrValue<string>,
    circleMinAge: PromiseOrValue<BigNumberish>,
    circleMaxAge: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { eligible: boolean; reason: string }>;

  isUserVerified(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxAge(overrides?: CallOverrides): Promise<BigNumber>;

  metrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalVerifications: BigNumber;
      passportVerifications: BigNumber;
      idCardVerifications: BigNumber;
      uniqueCountries: BigNumber;
      avgAge: BigNumber;
      lastUpdated: BigNumber;
    }
  >;

  minAge(overrides?: CallOverrides): Promise<BigNumber>;

  onVerificationSuccess(
    output: PromiseOrValue<BytesLike>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFromBlacklist(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeVerification(
    user: PromiseOrValue<string>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scope(overrides?: CallOverrides): Promise<BigNumber>;

  scopeSeed(overrides?: CallOverrides): Promise<string>;

  setAgeRange(
    _minAge: PromiseOrValue<BigNumberish>,
    _maxAge: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedAttestations(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalVerifiedUsers(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateScope(
    _scope: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifiedUsers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      BigNumber,
      BigNumber,
      string,
      boolean,
      boolean,
      string,
      string
    ] & {
      isVerified: boolean;
      nationality: string;
      ageAtVerification: BigNumber;
      verificationTimestamp: BigNumber;
      userIdentifier: string;
      isHuman: boolean;
      passedOFACCheck: boolean;
      attestationId: string;
      originalDateOfBirth: string;
    }
  >;

  verifySelfProof(
    proofPayload: PromiseOrValue<BytesLike>,
    userContextData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSupportedAttestation(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklistUser(
      user: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklistedUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    configId(overrides?: CallOverrides): Promise<string>;

    configureContract(
      _configId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    countryStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        userCount: BigNumber;
        isSupported: boolean;
        lastUpdate: BigNumber;
      }
    >;

    emergencyPause(overrides?: CallOverrides): Promise<void>;

    emergencyPaused(overrides?: CallOverrides): Promise<boolean>;

    emergencyUnpause(overrides?: CallOverrides): Promise<void>;

    getConfigId(
      destinationChainId: PromiseOrValue<BytesLike>,
      userIdentifier: PromiseOrValue<BytesLike>,
      userDefinedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCountryStats(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        userCount: BigNumber;
        isSupported: boolean;
        lastUpdate: BigNumber;
      }
    >;

    getCurrentScope(overrides?: CallOverrides): Promise<BigNumber>;

    getScopeSeed(overrides?: CallOverrides): Promise<string>;

    getTotalStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalUsers: BigNumber;
        totalCountries: BigNumber;
        configScope: BigNumber;
      }
    >;

    getUserVerificationDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean, boolean] & {
        isVerified: boolean;
        nationality: string;
        ageAtVerification: BigNumber;
        verificationTimestamp: BigNumber;
        isHuman: boolean;
        passedOFACCheck: boolean;
      }
    >;

    identifierToAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isConfigured(overrides?: CallOverrides): Promise<boolean>;

    isContractConfigured(overrides?: CallOverrides): Promise<boolean>;

    isEligibleForROSCA(
      user: PromiseOrValue<string>,
      requiredCountry: PromiseOrValue<string>,
      circleMinAge: PromiseOrValue<BigNumberish>,
      circleMaxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { eligible: boolean; reason: string }>;

    isUserVerified(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxAge(overrides?: CallOverrides): Promise<BigNumber>;

    metrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalVerifications: BigNumber;
        passportVerifications: BigNumber;
        idCardVerifications: BigNumber;
        uniqueCountries: BigNumber;
        avgAge: BigNumber;
        lastUpdated: BigNumber;
      }
    >;

    minAge(overrides?: CallOverrides): Promise<BigNumber>;

    onVerificationSuccess(
      output: PromiseOrValue<BytesLike>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFromBlacklist(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeVerification(
      user: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    scope(overrides?: CallOverrides): Promise<BigNumber>;

    scopeSeed(overrides?: CallOverrides): Promise<string>;

    setAgeRange(
      _minAge: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedAttestations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalVerifiedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateScope(
      _scope: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiedUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean,
        string,
        string
      ] & {
        isVerified: boolean;
        nationality: string;
        ageAtVerification: BigNumber;
        verificationTimestamp: BigNumber;
        userIdentifier: string;
        isHuman: boolean;
        passedOFACCheck: boolean;
        attestationId: string;
        originalDateOfBirth: string;
      }
    >;

    verifySelfProof(
      proofPayload: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AttestationSupported(bytes32)"(
      attestationId?: null
    ): AttestationSupportedEventFilter;
    AttestationSupported(attestationId?: null): AttestationSupportedEventFilter;

    "ConfigUpdated(bytes32)"(newConfigId?: null): ConfigUpdatedEventFilter;
    ConfigUpdated(newConfigId?: null): ConfigUpdatedEventFilter;

    "CountryAdded(string)"(country?: null): CountryAddedEventFilter;
    CountryAdded(country?: null): CountryAddedEventFilter;

    "EmergencyPaused(bool)"(paused?: null): EmergencyPausedEventFilter;
    EmergencyPaused(paused?: null): EmergencyPausedEventFilter;

    "KYCScopeUpdated(uint256)"(newScope?: null): KYCScopeUpdatedEventFilter;
    KYCScopeUpdated(newScope?: null): KYCScopeUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ScopeUpdated(uint256)"(
      newScope?: PromiseOrValue<BigNumberish> | null
    ): ScopeUpdatedEventFilter;
    ScopeUpdated(
      newScope?: PromiseOrValue<BigNumberish> | null
    ): ScopeUpdatedEventFilter;

    "UserBlacklisted(address,string)"(
      user?: PromiseOrValue<string> | null,
      reason?: null
    ): UserBlacklistedEventFilter;
    UserBlacklisted(
      user?: PromiseOrValue<string> | null,
      reason?: null
    ): UserBlacklistedEventFilter;

    "UserVerified(address,bytes32,string,uint256,bytes32,uint256)"(
      userAddress?: PromiseOrValue<string> | null,
      userIdentifier?: PromiseOrValue<BytesLike> | null,
      nationality?: null,
      age?: null,
      attestationId?: null,
      timestamp?: null
    ): UserVerifiedEventFilter;
    UserVerified(
      userAddress?: PromiseOrValue<string> | null,
      userIdentifier?: PromiseOrValue<BytesLike> | null,
      nationality?: null,
      age?: null,
      attestationId?: null,
      timestamp?: null
    ): UserVerifiedEventFilter;

    "VerificationRevoked(address,string)"(
      user?: PromiseOrValue<string> | null,
      reason?: null
    ): VerificationRevokedEventFilter;
    VerificationRevoked(
      user?: PromiseOrValue<string> | null,
      reason?: null
    ): VerificationRevokedEventFilter;
  };

  estimateGas: {
    addSupportedAttestation(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blacklistUser(
      user: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blacklistedUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configId(overrides?: CallOverrides): Promise<BigNumber>;

    configureContract(
      _configId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    countryStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyPaused(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getConfigId(
      destinationChainId: PromiseOrValue<BytesLike>,
      userIdentifier: PromiseOrValue<BytesLike>,
      userDefinedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountryStats(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentScope(overrides?: CallOverrides): Promise<BigNumber>;

    getScopeSeed(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStats(overrides?: CallOverrides): Promise<BigNumber>;

    getUserVerificationDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identifierToAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConfigured(overrides?: CallOverrides): Promise<BigNumber>;

    isContractConfigured(overrides?: CallOverrides): Promise<BigNumber>;

    isEligibleForROSCA(
      user: PromiseOrValue<string>,
      requiredCountry: PromiseOrValue<string>,
      circleMinAge: PromiseOrValue<BigNumberish>,
      circleMaxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserVerified(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAge(overrides?: CallOverrides): Promise<BigNumber>;

    metrics(overrides?: CallOverrides): Promise<BigNumber>;

    minAge(overrides?: CallOverrides): Promise<BigNumber>;

    onVerificationSuccess(
      output: PromiseOrValue<BytesLike>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromBlacklist(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeVerification(
      user: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scope(overrides?: CallOverrides): Promise<BigNumber>;

    scopeSeed(overrides?: CallOverrides): Promise<BigNumber>;

    setAgeRange(
      _minAge: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedAttestations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVerifiedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateScope(
      _scope: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifiedUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySelfProof(
      proofPayload: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportedAttestation(
      attestationId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blacklistUser(
      user: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blacklistedUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configureContract(
      _configId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    countryStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getConfigId(
      destinationChainId: PromiseOrValue<BytesLike>,
      userIdentifier: PromiseOrValue<BytesLike>,
      userDefinedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountryStats(
      country: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentScope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScopeSeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserVerificationDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identifierToAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConfigured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isContractConfigured(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEligibleForROSCA(
      user: PromiseOrValue<string>,
      requiredCountry: PromiseOrValue<string>,
      circleMinAge: PromiseOrValue<BigNumberish>,
      circleMaxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserVerified(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onVerificationSuccess(
      output: PromiseOrValue<BytesLike>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromBlacklist(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeVerification(
      user: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scopeSeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAgeRange(
      _minAge: PromiseOrValue<BigNumberish>,
      _maxAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedAttestations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVerifiedUsers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateScope(
      _scope: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifiedUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySelfProof(
      proofPayload: PromiseOrValue<BytesLike>,
      userContextData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

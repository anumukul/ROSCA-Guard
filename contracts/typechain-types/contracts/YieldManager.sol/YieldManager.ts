/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace YieldManager {
  export type YieldSourceStruct = {
    name: PromiseOrValue<string>;
    contractAddress: PromiseOrValue<string>;
    isActive: PromiseOrValue<boolean>;
    allocatedAmount: PromiseOrValue<BigNumberish>;
    totalYieldGenerated: PromiseOrValue<BigNumberish>;
    aprBasisPoints: PromiseOrValue<BigNumberish>;
  };

  export type YieldSourceStructOutput = [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    contractAddress: string;
    isActive: boolean;
    allocatedAmount: BigNumber;
    totalYieldGenerated: BigNumber;
    aprBasisPoints: BigNumber;
  };

  export type CircleYieldInfoStruct = {
    totalDeposited: PromiseOrValue<BigNumberish>;
    totalYieldEarned: PromiseOrValue<BigNumberish>;
    lastYieldDistribution: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type CircleYieldInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    totalDeposited: BigNumber;
    totalYieldEarned: BigNumber;
    lastYieldDistribution: BigNumber;
    isActive: boolean;
  };
}

export interface YieldManagerInterface extends utils.Interface {
  functions: {
    "MAX_PLATFORM_SHARE()": FunctionFragment;
    "PYUSD()": FunctionFragment;
    "addYieldSource(string,address,bool,uint256)": FunctionFragment;
    "authorizeCircle(address)": FunctionFragment;
    "authorizedCircles(address)": FunctionFragment;
    "circleYieldInfo(address)": FunctionFragment;
    "deauthorizeCircle(address)": FunctionFragment;
    "depositFunds(uint256)": FunctionFragment;
    "distributeYieldToCircle(address)": FunctionFragment;
    "emergencyWithdrawCircleFunds(address)": FunctionFragment;
    "estimateYieldForAmount(uint256,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getAllYieldSources()": FunctionFragment;
    "getCircleYieldInfo(address)": FunctionFragment;
    "getPlatformStats()": FunctionFragment;
    "getYieldSource(uint256)": FunctionFragment;
    "harvestYield()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseYieldGeneration()": FunctionFragment;
    "platformYieldShare()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPlatformYieldShare(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "totalManagedFunds()": FunctionFragment;
    "totalYieldGenerated()": FunctionFragment;
    "totalYieldSources()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "treasuryBalance()": FunctionFragment;
    "unpauseYieldGeneration()": FunctionFragment;
    "updateYieldSource(uint256,bool,uint256)": FunctionFragment;
    "withdrawFunds(uint256)": FunctionFragment;
    "withdrawTreasuryFunds()": FunctionFragment;
    "yieldGenerationPaused()": FunctionFragment;
    "yieldSources(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_PLATFORM_SHARE"
      | "PYUSD"
      | "addYieldSource"
      | "authorizeCircle"
      | "authorizedCircles"
      | "circleYieldInfo"
      | "deauthorizeCircle"
      | "depositFunds"
      | "distributeYieldToCircle"
      | "emergencyWithdrawCircleFunds"
      | "estimateYieldForAmount"
      | "factory"
      | "getAllYieldSources"
      | "getCircleYieldInfo"
      | "getPlatformStats"
      | "getYieldSource"
      | "harvestYield"
      | "owner"
      | "pauseYieldGeneration"
      | "platformYieldShare"
      | "renounceOwnership"
      | "setPlatformYieldShare"
      | "setTreasury"
      | "totalManagedFunds"
      | "totalYieldGenerated"
      | "totalYieldSources"
      | "transferOwnership"
      | "treasury"
      | "treasuryBalance"
      | "unpauseYieldGeneration"
      | "updateYieldSource"
      | "withdrawFunds"
      | "withdrawTreasuryFunds"
      | "yieldGenerationPaused"
      | "yieldSources"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_PLATFORM_SHARE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PYUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addYieldSource",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeCircle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedCircles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "circleYieldInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeCircle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeYieldToCircle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawCircleFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateYieldForAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllYieldSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCircleYieldInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldSource",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestYield",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseYieldGeneration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformYieldShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformYieldShare",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalManagedFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalYieldGenerated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalYieldSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseYieldGeneration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateYieldSource",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTreasuryFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yieldGenerationPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yieldSources",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PLATFORM_SHARE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PYUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addYieldSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeCircle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circleYieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeCircle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeYieldToCircle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawCircleFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateYieldForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllYieldSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircleYieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseYieldGeneration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformYieldShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformYieldShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalManagedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalYieldGenerated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalYieldSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseYieldGeneration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateYieldSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTreasuryFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldGenerationPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldSources",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyWithdrawal(address,uint256)": EventFragment;
    "FundsDeposited(address,uint256)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "YieldDistributed(address,uint256,uint256)": EventFragment;
    "YieldHarvested(uint256,uint256)": EventFragment;
    "YieldSourceAdded(uint256,string,address)": EventFragment;
    "YieldSourceUpdated(uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldHarvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldSourceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldSourceUpdated"): EventFragment;
}

export interface EmergencyWithdrawalEventObject {
  circle: string;
  amount: BigNumber;
}
export type EmergencyWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  EmergencyWithdrawalEventObject
>;

export type EmergencyWithdrawalEventFilter =
  TypedEventFilter<EmergencyWithdrawalEvent>;

export interface FundsDepositedEventObject {
  circle: string;
  amount: BigNumber;
}
export type FundsDepositedEvent = TypedEvent<
  [string, BigNumber],
  FundsDepositedEventObject
>;

export type FundsDepositedEventFilter = TypedEventFilter<FundsDepositedEvent>;

export interface FundsWithdrawnEventObject {
  circle: string;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface YieldDistributedEventObject {
  circle: string;
  amount: BigNumber;
  platformFee: BigNumber;
}
export type YieldDistributedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  YieldDistributedEventObject
>;

export type YieldDistributedEventFilter =
  TypedEventFilter<YieldDistributedEvent>;

export interface YieldHarvestedEventObject {
  sourceId: BigNumber;
  amount: BigNumber;
}
export type YieldHarvestedEvent = TypedEvent<
  [BigNumber, BigNumber],
  YieldHarvestedEventObject
>;

export type YieldHarvestedEventFilter = TypedEventFilter<YieldHarvestedEvent>;

export interface YieldSourceAddedEventObject {
  sourceId: BigNumber;
  name: string;
  contractAddress: string;
}
export type YieldSourceAddedEvent = TypedEvent<
  [BigNumber, string, string],
  YieldSourceAddedEventObject
>;

export type YieldSourceAddedEventFilter =
  TypedEventFilter<YieldSourceAddedEvent>;

export interface YieldSourceUpdatedEventObject {
  sourceId: BigNumber;
  isActive: boolean;
  newAPR: BigNumber;
}
export type YieldSourceUpdatedEvent = TypedEvent<
  [BigNumber, boolean, BigNumber],
  YieldSourceUpdatedEventObject
>;

export type YieldSourceUpdatedEventFilter =
  TypedEventFilter<YieldSourceUpdatedEvent>;

export interface YieldManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PLATFORM_SHARE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PYUSD(overrides?: CallOverrides): Promise<[string]>;

    addYieldSource(
      name: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      aprBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedCircles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    circleYieldInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        totalDeposited: BigNumber;
        totalYieldEarned: BigNumber;
        lastYieldDistribution: BigNumber;
        isActive: boolean;
      }
    >;

    deauthorizeCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeYieldToCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawCircleFunds(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateYieldForAmount(
      amount: PromiseOrValue<BigNumberish>,
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getAllYieldSources(
      overrides?: CallOverrides
    ): Promise<[YieldManager.YieldSourceStructOutput[]]>;

    getCircleYieldInfo(
      circle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[YieldManager.CircleYieldInfoStructOutput]>;

    getPlatformStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalFunds: BigNumber;
        totalYield: BigNumber;
        activeCircles: BigNumber;
        activeSources: BigNumber;
      }
    >;

    getYieldSource(
      sourceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[YieldManager.YieldSourceStructOutput]>;

    harvestYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseYieldGeneration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    platformYieldShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformYieldShare(
      newShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalManagedFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalYieldGenerated(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalYieldSources(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpauseYieldGeneration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateYieldSource(
      sourceId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      newAPR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTreasuryFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    yieldGenerationPaused(overrides?: CallOverrides): Promise<[boolean]>;

    yieldSources(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber, BigNumber] & {
        name: string;
        contractAddress: string;
        isActive: boolean;
        allocatedAmount: BigNumber;
        totalYieldGenerated: BigNumber;
        aprBasisPoints: BigNumber;
      }
    >;
  };

  MAX_PLATFORM_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

  PYUSD(overrides?: CallOverrides): Promise<string>;

  addYieldSource(
    name: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    isActive: PromiseOrValue<boolean>,
    aprBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeCircle(
    circle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedCircles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  circleYieldInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      totalDeposited: BigNumber;
      totalYieldEarned: BigNumber;
      lastYieldDistribution: BigNumber;
      isActive: boolean;
    }
  >;

  deauthorizeCircle(
    circle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFunds(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeYieldToCircle(
    circle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawCircleFunds(
    circle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateYieldForAmount(
    amount: PromiseOrValue<BigNumberish>,
    timeInSeconds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  getAllYieldSources(
    overrides?: CallOverrides
  ): Promise<YieldManager.YieldSourceStructOutput[]>;

  getCircleYieldInfo(
    circle: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<YieldManager.CircleYieldInfoStructOutput>;

  getPlatformStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalFunds: BigNumber;
      totalYield: BigNumber;
      activeCircles: BigNumber;
      activeSources: BigNumber;
    }
  >;

  getYieldSource(
    sourceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<YieldManager.YieldSourceStructOutput>;

  harvestYield(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseYieldGeneration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  platformYieldShare(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformYieldShare(
    newShare: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    newTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalManagedFunds(overrides?: CallOverrides): Promise<BigNumber>;

  totalYieldGenerated(overrides?: CallOverrides): Promise<BigNumber>;

  totalYieldSources(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryBalance(overrides?: CallOverrides): Promise<BigNumber>;

  unpauseYieldGeneration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateYieldSource(
    sourceId: PromiseOrValue<BigNumberish>,
    isActive: PromiseOrValue<boolean>,
    newAPR: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTreasuryFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  yieldGenerationPaused(overrides?: CallOverrides): Promise<boolean>;

  yieldSources(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber, BigNumber, BigNumber] & {
      name: string;
      contractAddress: string;
      isActive: boolean;
      allocatedAmount: BigNumber;
      totalYieldGenerated: BigNumber;
      aprBasisPoints: BigNumber;
    }
  >;

  callStatic: {
    MAX_PLATFORM_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    PYUSD(overrides?: CallOverrides): Promise<string>;

    addYieldSource(
      name: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      aprBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeCircle(
      circle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedCircles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    circleYieldInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        totalDeposited: BigNumber;
        totalYieldEarned: BigNumber;
        lastYieldDistribution: BigNumber;
        isActive: boolean;
      }
    >;

    deauthorizeCircle(
      circle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeYieldToCircle(
      circle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawCircleFunds(
      circle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    estimateYieldForAmount(
      amount: PromiseOrValue<BigNumberish>,
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getAllYieldSources(
      overrides?: CallOverrides
    ): Promise<YieldManager.YieldSourceStructOutput[]>;

    getCircleYieldInfo(
      circle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<YieldManager.CircleYieldInfoStructOutput>;

    getPlatformStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalFunds: BigNumber;
        totalYield: BigNumber;
        activeCircles: BigNumber;
        activeSources: BigNumber;
      }
    >;

    getYieldSource(
      sourceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<YieldManager.YieldSourceStructOutput>;

    harvestYield(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseYieldGeneration(overrides?: CallOverrides): Promise<void>;

    platformYieldShare(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPlatformYieldShare(
      newShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      newTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalManagedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    totalYieldGenerated(overrides?: CallOverrides): Promise<BigNumber>;

    totalYieldSources(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryBalance(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseYieldGeneration(overrides?: CallOverrides): Promise<void>;

    updateYieldSource(
      sourceId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      newAPR: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTreasuryFunds(overrides?: CallOverrides): Promise<void>;

    yieldGenerationPaused(overrides?: CallOverrides): Promise<boolean>;

    yieldSources(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber, BigNumber] & {
        name: string;
        contractAddress: string;
        isActive: boolean;
        allocatedAmount: BigNumber;
        totalYieldGenerated: BigNumber;
        aprBasisPoints: BigNumber;
      }
    >;
  };

  filters: {
    "EmergencyWithdrawal(address,uint256)"(
      circle?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;
    EmergencyWithdrawal(
      circle?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;

    "FundsDeposited(address,uint256)"(
      circle?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsDepositedEventFilter;
    FundsDeposited(
      circle?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsDepositedEventFilter;

    "FundsWithdrawn(address,uint256)"(
      circle?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      circle?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "YieldDistributed(address,uint256,uint256)"(
      circle?: PromiseOrValue<string> | null,
      amount?: null,
      platformFee?: null
    ): YieldDistributedEventFilter;
    YieldDistributed(
      circle?: PromiseOrValue<string> | null,
      amount?: null,
      platformFee?: null
    ): YieldDistributedEventFilter;

    "YieldHarvested(uint256,uint256)"(
      sourceId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): YieldHarvestedEventFilter;
    YieldHarvested(
      sourceId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): YieldHarvestedEventFilter;

    "YieldSourceAdded(uint256,string,address)"(
      sourceId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      contractAddress?: null
    ): YieldSourceAddedEventFilter;
    YieldSourceAdded(
      sourceId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      contractAddress?: null
    ): YieldSourceAddedEventFilter;

    "YieldSourceUpdated(uint256,bool,uint256)"(
      sourceId?: PromiseOrValue<BigNumberish> | null,
      isActive?: null,
      newAPR?: null
    ): YieldSourceUpdatedEventFilter;
    YieldSourceUpdated(
      sourceId?: PromiseOrValue<BigNumberish> | null,
      isActive?: null,
      newAPR?: null
    ): YieldSourceUpdatedEventFilter;
  };

  estimateGas: {
    MAX_PLATFORM_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    PYUSD(overrides?: CallOverrides): Promise<BigNumber>;

    addYieldSource(
      name: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      aprBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedCircles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circleYieldInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deauthorizeCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeYieldToCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawCircleFunds(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateYieldForAmount(
      amount: PromiseOrValue<BigNumberish>,
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getAllYieldSources(overrides?: CallOverrides): Promise<BigNumber>;

    getCircleYieldInfo(
      circle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformStats(overrides?: CallOverrides): Promise<BigNumber>;

    getYieldSource(
      sourceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseYieldGeneration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    platformYieldShare(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformYieldShare(
      newShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalManagedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    totalYieldGenerated(overrides?: CallOverrides): Promise<BigNumber>;

    totalYieldSources(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryBalance(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseYieldGeneration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateYieldSource(
      sourceId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      newAPR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTreasuryFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    yieldGenerationPaused(overrides?: CallOverrides): Promise<BigNumber>;

    yieldSources(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PLATFORM_SHARE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PYUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addYieldSource(
      name: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      aprBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedCircles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circleYieldInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deauthorizeCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeYieldToCircle(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawCircleFunds(
      circle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateYieldForAmount(
      amount: PromiseOrValue<BigNumberish>,
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllYieldSources(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCircleYieldInfo(
      circle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getYieldSource(
      sourceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseYieldGeneration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    platformYieldShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformYieldShare(
      newShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalManagedFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalYieldGenerated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalYieldSources(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpauseYieldGeneration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateYieldSource(
      sourceId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      newAPR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTreasuryFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    yieldGenerationPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldSources(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

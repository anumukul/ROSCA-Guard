/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SelfVerificationRoot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfVerificationRoot__factory>;
    getContractFactory(
      name: "IDscCircuitVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDscCircuitVerifier__factory>;
    getContractFactory(
      name: "IIdentityVerificationHubV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentityVerificationHubV2__factory>;
    getContractFactory(
      name: "IRegisterCircuitVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegisterCircuitVerifier__factory>;
    getContractFactory(
      name: "ISelfVerificationRoot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISelfVerificationRoot__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "IROSCAFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IROSCAFactory__factory>;
    getContractFactory(
      name: "ROSCAAnalytics",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ROSCAAnalytics__factory>;
    getContractFactory(
      name: "IKYCVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKYCVerifier__factory>;
    getContractFactory(
      name: "ROSCACircle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ROSCACircle__factory>;
    getContractFactory(
      name: "ROSCAFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ROSCAFactory__factory>;
    getContractFactory(
      name: "KYCVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KYCVerifier__factory>;
    getContractFactory(
      name: "IAaveV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveV3Pool__factory>;
    getContractFactory(
      name: "ICompoundV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICompoundV3__factory>;
    getContractFactory(
      name: "IROSCACircle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IROSCACircle__factory>;
    getContractFactory(
      name: "YieldManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldManager__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SelfVerificationRoot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfVerificationRoot>;
    getContractAt(
      name: "IDscCircuitVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDscCircuitVerifier>;
    getContractAt(
      name: "IIdentityVerificationHubV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentityVerificationHubV2>;
    getContractAt(
      name: "IRegisterCircuitVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegisterCircuitVerifier>;
    getContractAt(
      name: "ISelfVerificationRoot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISelfVerificationRoot>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "IROSCAFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IROSCAFactory>;
    getContractAt(
      name: "ROSCAAnalytics",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ROSCAAnalytics>;
    getContractAt(
      name: "IKYCVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKYCVerifier>;
    getContractAt(
      name: "ROSCACircle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ROSCACircle>;
    getContractAt(
      name: "ROSCAFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ROSCAFactory>;
    getContractAt(
      name: "KYCVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KYCVerifier>;
    getContractAt(
      name: "IAaveV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveV3Pool>;
    getContractAt(
      name: "ICompoundV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICompoundV3>;
    getContractAt(
      name: "IROSCACircle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IROSCACircle>;
    getContractAt(
      name: "YieldManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldManager>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
